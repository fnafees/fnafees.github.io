
var riverLengths = [];
var indexes = [];
function riverSizes(matrix) {
    riverLengths = [];
    indexes = [];
    for (var y = 0; y < matrix.length; y++) {
        for (var x = 0; x < matrix[0].length; x++) {
            var index = [y, x];
            if (!checkForIndex(index)) {
                indexes.push(index);
                if (matrix[y][x] == 1) {
                    riverLengths.push(1);
                    checkAdj(index, matrix);
                }
            }
        }
    }
    return riverLengths;
}

function checkAdj(index, matrix) {
    if (index[1] + 1 < matrix[0].length && !checkForIndex([index[0], index[1] + 1])) {
        indexes.push([index[0], index[1] + 1]);
        if (matrix[index[0]][index[1] + 1] == 1) {
            riverLengths[riverLengths.length - 1]++;
            checkAdj([index[0], index[1] + 1], matrix);
        }
    }

    if (index[1] - 1 > -1 && !checkForIndex([index[0], index[1] - 1])) {
        indexes.push([index[0], index[1] - 1]);
        if (matrix[index[0]][index[1] - 1] == 1) {
            riverLengths[riverLengths.length - 1]++;
            checkAdj([index[0], index[1] - 1], matrix);
        }
    }
    if (index[0] + 1 < matrix.length && !checkForIndex([index[0] + 1, index[1]])) {
        indexes.push([index[0] + 1, index[1]]);
        if (matrix[index[0] + 1][index[1]] == 1) {
            riverLengths[riverLengths.length - 1]++;
            checkAdj([index[0] + 1, index[1]], matrix);
        }
    }
    if (index[0] - 1 > -1 && !checkForIndex([index[0] - 1, index[1]])) {
        indexes.push([index[0] - 1, index[1]]);
        if (matrix[index[0] - 1][index[1]] == 1) {
            riverLengths[riverLengths.length - 1]++;
            checkAdj([index[0] - 1, index[1]], matrix);
        }
    }
}
function checkForIndex(index) {
    for (let i = 0; i < indexes.length; i++) {
        if (indexes[i][0] == index[0] && indexes[i][1] == index[1])
            return true;
    }
    return false;
}
// Do not edit the line below.
exports.riverSizes = riverSizes;
